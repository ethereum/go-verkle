// Code generated by github.com/karalabe/ssz. DO NOT EDIT.

package verkle

import "github.com/karalabe/ssz"

// Cached static size computed on package init.
var staticSizeCacheVerkleProof = 4 + 4 + 4 + 32 + (*IPAProof)(nil).SizeSSZ()

// SizeSSZ returns either the static size of the object if fixed == true, or
// the total size otherwise.
func (obj *VerkleProof) SizeSSZ(fixed bool) uint32 {
	var size = uint32(staticSizeCacheVerkleProof)
	if fixed {
		return size
	}
	size += ssz.SizeSliceOfStaticBytes(obj.OtherStems)
	size += ssz.SizeDynamicBytes(obj.DepthExtensionPresent)
	size += ssz.SizeSliceOfStaticBytes(obj.CommitmentsByPath)

	return size
}

// DefineSSZ defines how an object is encoded/decoded.
func (obj *VerkleProof) DefineSSZ(codec *ssz.Codec) {
	// Define the static data (fields and dynamic offsets)
	ssz.DefineSliceOfStaticBytesOffset(codec, &obj.OtherStems, 65536)          // Offset (0) -            OtherStems -  4 bytes
	ssz.DefineDynamicBytesOffset(codec, &obj.DepthExtensionPresent, 65536)     // Offset (1) - DepthExtensionPresent -  4 bytes
	ssz.DefineSliceOfStaticBytesOffset(codec, &obj.CommitmentsByPath, 2162688) // Offset (2) -     CommitmentsByPath -  4 bytes
	ssz.DefineStaticBytes(codec, &obj.D)                                       // Field  (3) -                     D - 32 bytes
	ssz.DefineStaticObject(codec, &obj.IPAProof)                               // Field  (4) -              IPAProof -  ? bytes (IPAProof)

	// Define the dynamic data (fields)
	ssz.DefineSliceOfStaticBytesContent(codec, &obj.OtherStems, 65536)          // Field  (0) -            OtherStems - ? bytes
	ssz.DefineDynamicBytesContent(codec, &obj.DepthExtensionPresent, 65536)     // Field  (1) - DepthExtensionPresent - ? bytes
	ssz.DefineSliceOfStaticBytesContent(codec, &obj.CommitmentsByPath, 2162688) // Field  (2) -     CommitmentsByPath - ? bytes
}
